



QUIC                                                             R. Marx
Internet-Draft                                        Hasselt University
Intended status: Standards Track                        October 04, 2019
Expires: April 6, 2020


               QUIC and HTTP/3 event definitions for qlog
            draft-marx-qlog-event-definitions-quic-h3-latest

Abstract

   This document describes concrete qlog event definitions and their
   metadata for QUIC and HTTP/3-related events.  These events can then
   be embedded in the higher level schema defined in draft-marx-quic-
   logging-main-schema-latest.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 6, 2020.

Copyright Notice

   Copyright (c) 2019 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Marx                      Expires April 6, 2020                 [Page 1]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   4
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   4
   2.  Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   3.  Importance  . . . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  QUIC event definitions  . . . . . . . . . . . . . . . . . . .   6
     4.1.  connectivity  . . . . . . . . . . . . . . . . . . . . . .   6
       4.1.1.  server_listening  . . . . . . . . . . . . . . . . . .   6
       4.1.2.  connection_started  . . . . . . . . . . . . . . . . .   7
       4.1.3.  connection_id_updated . . . . . . . . . . . . . . . .   7
       4.1.4.  spin_bit_updated  . . . . . . . . . . . . . . . . . .   8
       4.1.5.  connection_retried  . . . . . . . . . . . . . . . . .   8
       4.1.6.  connection_closed . . . . . . . . . . . . . . . . . .   8
       4.1.7.  MIGRATION-related events  . . . . . . . . . . . . . .   8
     4.2.  security  . . . . . . . . . . . . . . . . . . . . . . . .   9
       4.2.1.  cipher_updated  . . . . . . . . . . . . . . . . . . .   9
       4.2.2.  key_updated . . . . . . . . . . . . . . . . . . . . .   9
       4.2.3.  key_retired . . . . . . . . . . . . . . . . . . . . .   9
     4.3.  transport . . . . . . . . . . . . . . . . . . . . . . . .  10
       4.3.1.  datagram_sent . . . . . . . . . . . . . . . . . . . .  10
       4.3.2.  datagram_received . . . . . . . . . . . . . . . . . .  10
       4.3.3.  packet_sent . . . . . . . . . . . . . . . . . . . . .  10
       4.3.4.  packet_received . . . . . . . . . . . . . . . . . . .  11
       4.3.5.  packet_dropped  . . . . . . . . . . . . . . . . . . .  12
       4.3.6.  packet_buffered . . . . . . . . . . . . . . . . . . .  12
       4.3.7.  stream_state_updated  . . . . . . . . . . . . . . . .  13
       4.3.8.  flow_control_updated  . . . . . . . . . . . . . . . .  14
       4.3.9.  version_updated . . . . . . . . . . . . . . . . . . .  14
       4.3.10. transport_parameters_updated  . . . . . . . . . . . .  14
       4.3.11. ALPN_updated  . . . . . . . . . . . . . . . . . . . .  14
     4.4.  recovery  . . . . . . . . . . . . . . . . . . . . . . . .  15
       4.4.1.  metrics_updated . . . . . . . . . . . . . . . . . . .  15
       4.4.2.  loss_timer_set  . . . . . . . . . . . . . . . . . . .  15
       4.4.3.  loss_timer_expired  . . . . . . . . . . . . . . . . .  16
       4.4.4.  packet_lost . . . . . . . . . . . . . . . . . . . . .  16
       4.4.5.  packets_acknowledged  . . . . . . . . . . . . . . . .  16
       4.4.6.  packet_retransmitted  . . . . . . . . . . . . . . . .  17
   5.  HTTP/3 event definitions  . . . . . . . . . . . . . . . . . .  17
     5.1.  http  . . . . . . . . . . . . . . . . . . . . . . . . . .  17
       5.1.1.  stream_state_updated  . . . . . . . . . . . . . . . .  17
       5.1.2.  stream_type_updated . . . . . . . . . . . . . . . . .  18
       5.1.3.  frame_created . . . . . . . . . . . . . . . . . . . .  18
       5.1.4.  frame_parsed  . . . . . . . . . . . . . . . . . . . .  19
       5.1.5.  data_moved  . . . . . . . . . . . . . . . . . . . . .  19
     5.2.  QPACK . . . . . . . . . . . . . . . . . . . . . . . . . .  20
       5.2.1.  header_encoded  . . . . . . . . . . . . . . . . . . .  20
       5.2.2.  header_decoded  . . . . . . . . . . . . . . . . . . .  20



Marx                      Expires April 6, 2020                 [Page 2]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


       5.2.3.  TODO  . . . . . . . . . . . . . . . . . . . . . . . .  21
     5.3.  prioritization  . . . . . . . . . . . . . . . . . . . . .  21
     5.4.  PUSH  . . . . . . . . . . . . . . . . . . . . . . . . . .  21
   6.  General error and warning definitions . . . . . . . . . . . .  21
     6.1.  error . . . . . . . . . . . . . . . . . . . . . . . . . .  21
       6.1.1.  header_decrypt  . . . . . . . . . . . . . . . . . . .  21
       6.1.2.  payload_decrypt . . . . . . . . . . . . . . . . . . .  21
       6.1.3.  connection_error  . . . . . . . . . . . . . . . . . .  22
       6.1.4.  application_error . . . . . . . . . . . . . . . . . .  22
       6.1.5.  internal_error  . . . . . . . . . . . . . . . . . . .  22
     6.2.  warning . . . . . . . . . . . . . . . . . . . . . . . . .  22
       6.2.1.  internal_warning  . . . . . . . . . . . . . . . . . .  22
     6.3.  info  . . . . . . . . . . . . . . . . . . . . . . . . . .  23
       6.3.1.  message . . . . . . . . . . . . . . . . . . . . . . .  23
     6.4.  debug . . . . . . . . . . . . . . . . . . . . . . . . . .  23
       6.4.1.  message . . . . . . . . . . . . . . . . . . . . . . .  23
     6.5.  verbose . . . . . . . . . . . . . . . . . . . . . . . . .  23
       6.5.1.  message . . . . . . . . . . . . . . . . . . . . . . .  23
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  23
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  23
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  24
     9.2.  URIs  . . . . . . . . . . . . . . . . . . . . . . . . . .  24
   Appendix A.  QUIC DATA type definitions . . . . . . . . . . . . .  24
     A.1.  TransportParameter  . . . . . . . . . . . . . . . . . . .  24
     A.2.  PacketType  . . . . . . . . . . . . . . . . . . . . . . .  24
     A.3.  PacketHeader  . . . . . . . . . . . . . . . . . . . . . .  25
     A.4.  KeyType . . . . . . . . . . . . . . . . . . . . . . . . .  25
     A.5.  QUIC Frames . . . . . . . . . . . . . . . . . . . . . . .  25
       A.5.1.  PaddingFrame  . . . . . . . . . . . . . . . . . . . .  25
       A.5.2.  PingFrame . . . . . . . . . . . . . . . . . . . . . .  26
       A.5.3.  AckFrame  . . . . . . . . . . . . . . . . . . . . . .  26
       A.5.4.  ResetStreamFrame  . . . . . . . . . . . . . . . . . .  26
       A.5.5.  StopSendingFrame  . . . . . . . . . . . . . . . . . .  26
       A.5.6.  CryptoFrame . . . . . . . . . . . . . . . . . . . . .  27
       A.5.7.  NewTokenFrame . . . . . . . . . . . . . . . . . . . .  27
       A.5.8.  StreamFrame . . . . . . . . . . . . . . . . . . . . .  27
       A.5.9.  MaxDataFrame  . . . . . . . . . . . . . . . . . . . .  27
       A.5.10. MaxStreamDataFrame  . . . . . . . . . . . . . . . . .  28
       A.5.11. MaxStreamsFrame . . . . . . . . . . . . . . . . . . .  28
       A.5.12. DataBlockedFrame  . . . . . . . . . . . . . . . . . .  28
       A.5.13. StreamDataBlockedFrame  . . . . . . . . . . . . . . .  28
       A.5.14. StreamsBlockedFrame . . . . . . . . . . . . . . . . .  28
       A.5.15. NewConnectionIDFrame  . . . . . . . . . . . . . . . .  29
       A.5.16. RetireConnectionIDFrame . . . . . . . . . . . . . . .  29
       A.5.17. PathChallengeFrame  . . . . . . . . . . . . . . . . .  29
       A.5.18. PathResponseFrame . . . . . . . . . . . . . . . . . .  29
       A.5.19. ConnectionCloseFrame  . . . . . . . . . . . . . . . .  29



Marx                      Expires April 6, 2020                 [Page 3]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


       A.5.20. UnknownFrame  . . . . . . . . . . . . . . . . . . . .  30
       A.5.21. TransportError  . . . . . . . . . . . . . . . . . . .  30
   Appendix B.  HTTP/3 DATA type definitions . . . . . . . . . . . .  30
     B.1.  HTTP/3 Frames . . . . . . . . . . . . . . . . . . . . . .  30
       B.1.1.  DataFrame . . . . . . . . . . . . . . . . . . . . . .  31
       B.1.2.  HeadersFrame  . . . . . . . . . . . . . . . . . . . .  31
       B.1.3.  PriorityFrame . . . . . . . . . . . . . . . . . . . .  31
       B.1.4.  CancelPushFrame . . . . . . . . . . . . . . . . . . .  31
       B.1.5.  SettingsFrame . . . . . . . . . . . . . . . . . . . .  32
       B.1.6.  PushPromiseFrame  . . . . . . . . . . . . . . . . . .  32
       B.1.7.  GoAwayFrame . . . . . . . . . . . . . . . . . . . . .  32
       B.1.8.  MaxPushIDFrame  . . . . . . . . . . . . . . . . . . .  32
       B.1.9.  DuplicatePushFrame  . . . . . . . . . . . . . . . . .  32
       B.1.10. ReservedFrame . . . . . . . . . . . . . . . . . . . .  33
       B.1.11. UnknownFrame  . . . . . . . . . . . . . . . . . . . .  33
     B.2.  ApplicationError  . . . . . . . . . . . . . . . . . . . .  33
   Appendix C.  Change Log . . . . . . . . . . . . . . . . . . . . .  33
     C.1.  Since draft-00: . . . . . . . . . . . . . . . . . . . . .  33
   Appendix D.  Design Variations  . . . . . . . . . . . . . . . . .  34
   Appendix E.  Acknowledgements . . . . . . . . . . . . . . . . . .  34
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  34

1.  Introduction

   Feedback and discussion welcome at https://github.com/quiclog/
   internet-drafts.  Readers are advised to refer to "editor's draft" at
   that URL for an up-to-date version of this document.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

2.  Overview

   This document describes the values of the qlog "category",
   "event_type" and "data" fields and their semantics for the QUIC and
   HTTP/3 protocols.  The definitions included in this file are assumed
   to be used in qlog's "trace" containers, where the trace's
   "protocol_type" field MUST be set to "QUIC_HTTP3".

   This document is based on draft-23 of the QUIC and HTTP/3 I-Ds QUIC-
   TRANSPORT [QUIC-HTTP].

   This document uses the "TypeScript" language [1] to describe its
   schema in.  We use TypeScript because it is less verbose than JSON-
   schema and almost as expressive.  It also makes it easier to include



Marx                      Expires April 6, 2020                 [Page 4]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   these definitions directly into a web-based tool.  TypeScript type
   definitions for this document are available at
   https://github.com/quiclog/qlog/tree/master/TypeScript.  The main
   conventions a reader should be aware of are:

   o  obj? : this object is optional

   o  type1 | type2 : a union of these two types (object can be either
      type1 OR type2)

   o  obj:type : this object has this concrete type

   o  obj[] : this object is an array (which can contain any type of
      object)

   o  obj:Array<type> : this object is an array of this type

   o  number : identifies either an integer, float or double in
      TypeScript.  In this document, number always means an integer.

   o  Unless explicity defined, the value of an enum entry is the string
      version of its name (e.g., initial = "initial")

   o  Many numerical fields have type "string" instead of "number".
      This is because many JSON implementations only support integers up
      to 2^53-1 (MAX_INTEGER for JavaScript without BigInt support),
      which is less than QUIC's VLIE types (2^62-1).  Each field that
      can potentially have a value larger than 2^53-1 is thus a string,
      where a number would be semantically more correct.  Unless
      mentioned otherwise (e.g., for connection IDs), numerical fields
      that are logged as strings (e.g., packet numbers) MUST be logged
      in decimal (base-10) format.  TODO: see issue 10

3.  Importance

   Not all the listed events are of equal importance to achieve good
   debuggability.  As such, each event has an "importance indicator"
   with one of three values, in decreasing order of importance and
   exptected usage:

   o  Core

   o  Base

   o  Extra

   The "Core" events are the events that SHOULD be present in all qlog
   files.  These are mostly tied to basic packet and frame parsing and



Marx                      Expires April 6, 2020                 [Page 5]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   creation, as well as listing basic internal metrics.  Tool
   implementers SHOULD expect and add support for these events, though
   SHOULD NOT expect all Core events to be present in each qlog trace.

   The "Base" events add additional debugging options and CAN be present
   in qlog files.  Most of these can be implicitly inferred from data in
   Core events (if those contain all their properties), but for many it
   is better to log the events explicitly as well, making it clearer how
   the implementation behaves.  These events are for example tied to
   passing data around in buffers, to how internal state machines change
   and help show when decisions are actually made based on received
   data.  Tool implementers SHOULD at least add support for showing the
   contents of these events, if they do not handle them explicitly.

   The "Extra" events are considered mostly useful for low-level
   debugging of the implementation, rather than the protocol.  They
   allow more fine-grained tracking of internal behaviour.  As such,
   they CAN be present in qlog files and tool implementers CAN add
   support for these, but they are not required to.

   Note that in some cases, implementers might not want to log frame-
   level details in the "Core" events due to performance considerations.
   In this case, they SHOULD use (a subset of) relevant "Base" events
   instead to ensure usability of the qlog output.  As an example,
   implementations that do not log "packet_received" events and thus
   also not which (if any) ACK frames the packet contain, SHOULD log
   packets_acknowledged events instead.

4.  QUIC event definitions

   o  TODO: flesh out the definitions for most of these

   o  TODO: add all definitions for HTTP3 and QPACK events

4.1.  connectivity

4.1.1.  server_listening

   Importance: Extra

   Emitted when the server starts accepting connections.

   Data:








Marx                      Expires April 6, 2020                 [Page 6]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       ip_v4?: string,
       ip_v6?: string,
       port: number,

       quic_versions?: Array<string>,
       alpn_values?: Array<string>,

       early_data_allowed?:boolean,
       stateless_reset_required?:boolean
   }

4.1.2.  connection_started

   Importance: Base

   Used for both attempting (client-perspective) and accepting (server-
   perspective) new connections.

   Data:

   {
       ip_version: string,
       src_ip: string,
       dst_ip: string,

       protocol?: string, // (default "QUIC")
       src_port: number,
       dst_port: number,

       quic_version?: string,
       src_cid?: string,
       dst_cid?: string
   }

4.1.3.  connection_id_updated

   Importance: Core

   This is viewed from the perspective of the one applying the new id.
   As such, if we receive a new connection id from our peer, we will see
   the dst_ fields are set.  If we update our own connection id (e.g.,
   NEW_CONNECTION_ID frame), we log the src_ fields.

   Data:






Marx                      Expires April 6, 2020                 [Page 7]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       src_old?: string,
       src_new?: string,

       dst_old?: string,
       dst_new?: string
   }

4.1.4.  spin_bit_updated

   Importance: Base

   TODO: is this best as a connectivity event? should this be in
   transport/recovery instead?

   Data:

   {
       state: boolean
   }

4.1.5.  connection_retried

   TODO

4.1.6.  connection_closed

   Importance: Extra

   Data:

{
    src_id?: string // (only needed when logging in a trace containing data for multiple connections. Otherwise it's implied.)
}

   Triggers:

   o  "error"

   o  "clean"

4.1.7.  MIGRATION-related events

   e.g., path_updated

   TODO: read up on the draft how migration works and whether to best
   fit this here or in TRANSPORT TODO: integrate
   https://tools.ietf.org/html/draft-deconinck-quic-multipath-02



Marx                      Expires April 6, 2020                 [Page 8]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


4.2.  security

4.2.1.  cipher_updated

   Importance: Base

   TODO: assume this will only happen once at the start, but check up on
   that!  TODO: maybe this is not the ideal name?

   Data:

   {
       cipher_type:string  // (e.g., AES_128_GCM_SHA256)
   }

4.2.2.  key_updated

   Importance: Base

   Note: secret_update would be more correct, but in the draft it's
   called KEY_UPDATE, so stick with that for consistency

   Data:

   {
       key_type:KeyType,
       old?:string,
       new:string,
       generation?:number
   }

   Triggers:

   o  "tls" // (e.g., initial, handshake and 0-RTT keys are generated by
      TLS)

   o  "remote_update"

   o  "local_update"

4.2.3.  key_retired

   Importance: Base

   Data:






Marx                      Expires April 6, 2020                 [Page 9]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       key_type:KeyType,
       key:string,
       generation?:number
   }

   Triggers:

   o  "tls" // (e.g., initial, handshake and 0-RTT keys are dropped
      implicitly)

   o  "remote_update"

   o  "local_update"

4.3.  transport

4.3.1.  datagram_sent

   Importance: Extra

   When we pass a UDP-level datagram to the socket

   Data:

   {
       count?:number, // to support passing multiple at once
       byte_length:number
   }

4.3.2.  datagram_received

   Importance: Extra

   When we receive a UDP-level datagram from the socket.

   Data:

   {
       count?:number, // to support passing multiple at once
       byte_length:number
   }

4.3.3.  packet_sent

   Importance: Core

   Data:



Marx                      Expires April 6, 2020                [Page 10]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       packet_type:PacketType,
       header:PacketHeader,
       frames:Array<QuicFrame>, // see appendix for the definitions

       is_coalesced?:boolean,

       raw_encrypted?:string, // for debugging purposes
       raw_decrypted?:string  // for debugging purposes
   }

   Note: We do not explicitly log the encryption_level or
   packet_number_space: the packet_type specifies this by inference
   (assuming correct implementation)

   Triggers:

   o  "retransmit_reordered" // draft-23 5.1.1

   o  "retransmit_timeout" // draft-23 5.1.2

   o  "pto_probe" // draft-23 5.3.1

   o  "retransmit_crypto" // draft-19 6.2

   o  "cc_bandwidth_probe" // needed for some CCs to figure out
      bandwidth allocations when there are no normal sends

4.3.4.  packet_received

   Importance: Core

   Data:

   {
       packet_type:PacketType,
       header:PacketHeader,
       frames:Array<QuicFrame>;, // see appendix for the definitions

       is_coalesced?:boolean,

       raw_encrypted?:string, // for debugging purposes
       raw_decrypted?:string  // for debugging purposes
   }

   Note: We do not explicitly log the encryption_level or
   packet_number_space: the packet_type specifies this by inference
   (assuming correct implementation)



Marx                      Expires April 6, 2020                [Page 11]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   Triggers:

   o  "keys_available" // if packet was buffered because it couldn't be
      decrypted before

4.3.5.  packet_dropped

   Importance: Base

   Data:

   {
       packet_size:number,
       raw?:string, // hex encoded
   }

   Can be due to several reasons * TODO: How does this relate to
   HEADER_DECRYPT ERROR and PAYLOAD_DECRYPT ERROR? * TODO: if a packet
   is dropped because we don't have a connection for it, how can we add
   it to a given trace in the overall qlog file?  Need a sort of catch-
   call trace in each file? * TODO: differentiate between
   DATAGRAM_DROPPED and PACKET_DROPPED?  Same with PACKET_RECEIVED and
   DATAGRAM_RECEIVED?

4.3.6.  packet_buffered

   Importance: Base

   TODO: No need to repeat full packet here, should be logged in another
   event for that

   Data:

   {
       packet_type:PacketType,
       packet_number:string
   }

   Triggers:

   o  "backpressure" // indicates the parser cannot keep up, temporarily
      buffers packet for later processing

   o  "keys_unavailable" // if packet cannot be decrypted because the
      proper keys were not yet available






Marx                      Expires April 6, 2020                [Page 12]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


4.3.7.  stream_state_updated

   Importance: Base

   Data:

   {
       old:string,
       new:string
   }

   Possible values:

   o  idle

   o  open

   o  closed

   o  half_closed_remote

   o  half_closed_local

   o  destroyed // memory actually freed

   o  Ready

   o  Send

   o  Data Sent

   o  Reset Sent

   o  Data Rcvd

   o  Reset Rcvd

   o  Recv

   o  Size Known

   o  Data Rcvd

   o  Data Read

   o  Reset Read





Marx                      Expires April 6, 2020                [Page 13]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   TODO: do we need all of these?  How do implementations actually
   handle this in practice?

4.3.8.  flow_control_updated

   Importance: Base

   o  type = connection

   o  type = stream + id = streamid

   TODO: check state machine in QUIC transport draft

4.3.9.  version_updated

   Importance: Base

   TODO: check semantics on this: can versions update? will they ever?
   change to version_selected?

   Data:

   {
       old:string,
       new:string
   }

4.3.10.  transport_parameters_updated

   Importance: Core

   Data:

   {
       owner:string = "local" | "remote",
       parameters:Array<TransportParameter>;
   }

4.3.11.  ALPN_updated

   Importance: Core

   Data:

   {
       old:string,
       new:string
   }



Marx                      Expires April 6, 2020                [Page 14]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


4.4.  recovery

4.4.1.  metrics_updated

   Importance: Core

   Data:

   {
       cwnd?: number,
       bytes_in_flight?:number,

       min_rtt?:number,
       smoothed_rtt?:number,
       latest_rtt?:number,
       max_ack_delay?:number,

       rtt_variance?:number,
       ssthresh?:number,

       pacing_rate?:number,

       maximum_packet_size?:number // e.g., when updated after pmtud
   }

   This event SHOULD group all possible metric updates that happen at or
   around the same time in a single event (e.g., if min_rtt and
   smoothed_rtt change at the same time, they should be bundled in a
   single METRIC_UPDATE entry, rather than split out into two).
   Consequently, a metrics_updated event is only guaranteed to contain
   at least one of the listed metrics.

   Note: to make logging easier, implementations MAY log values even if
   they are the same as previously reported values (e.g., two subsequent
   METRIC_UPDATE entries can both report the exact same value for
   min_rtt).  However, applications SHOULD try to log only actual
   updates to values.

   o  TODO: what types of CC metrics do we need to support by default
      (e.g., cubic vs bbr)

4.4.2.  loss_timer_set

   Importance: Extra

   Data:





Marx                      Expires April 6, 2020                [Page 15]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       timer_type:"ack"|"pto", // called "mode" in draft-23 A.9.
       timeout:number
   }

4.4.3.  loss_timer_expired

   Importance: Extra

   Data:

   {
       timer_type:"ack"|"pto", // called "mode" in draft-23 A.9.
   }

4.4.4.  packet_lost

   Importance: Core

   Data:

{
    packet_type:PacketType,
    packet_number:string,

    // not all implementations will keep track of full packets, so these are optional
    header?:PacketHeader,
    frames?:Array<QuicFrame>, // see appendix for the definitions
}

   Triggers:

   o  "reordering_threshold",

   o  "time_threshold"

   o  "pto_expired" // draft-23 section 5.3.1, MAY

4.4.5.  packets_acknowledged

   Importance: Extra

   TODO: must this be a separate event? can't we get this from logged
   ACK frames? (however, explicitly indicating this and logging it in
   the ack handler is a better signal that the ACK actually had the
   intended effect than just logging its receipt)





Marx                      Expires April 6, 2020                [Page 16]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


4.4.6.  packet_retransmitted

   Importance: Extra

   TODO: only if a packet is retransmit in-full, which many stacks don't
   do.  Need something more flexible.

5.  HTTP/3 event definitions

5.1.  http

   Note: like all category values, the "http" category is written in
   lowercase.

5.1.1.  stream_state_updated

   Importance: Base

   Data:

   {
       id:string,
       old:string,
       new:string
   }

   Possible values:

   o  open // maybe local_open, remote_open?

   o  closed // maybe local_closed, remote_closed?

   o  expecting_push

   o  expecting_settings

   o  cancelled

   Currently, there is no proper state diagram in the HTTP draft (as
   opposed to the quic draft).  TODO: figure out proper values for this.

   Triggers:

   o  "request" // opened due to GET,POST,PUT,DELETE,... request from
      peer

   o  "push"




Marx                      Expires April 6, 2020                [Page 17]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   o  "reset" // closed due to reset from peer

5.1.2.  stream_type_updated

   Importance: Base

   TODO: possible merge this with stream_state_update?  Don't really
   want to watch for 2 events to get a newly opened stream + know what
   type it is

   Data:

   {
       id:string,
       old:string,
       new:string,
       owner:"local"|"remote"
   }

   Possible values:

   o  data

   o  control

   o  qpack_encode

   o  qpack_decode

   o  push

   o  reserved

   Currently, there is no proper state diagram in the HTTP draft (as
   opposed to the quic draft).  TODO: figure out proper values for this.

5.1.3.  frame_created

   Importance: Core

   HTTP equivalent to the packet_sent event.  This event is emitted when
   the HTTP/3 framing actually happens.  Note: this is not necessarily
   the same as when the HTTP/3 data is passed on to the QUIC layer.  For
   that, see the "data_moved" event.

   Data:





Marx                      Expires April 6, 2020                [Page 18]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   {
       stream_id:string,
       frame:HTTP3Frame // see appendix for the definitions,
       byte_length:string,

       raw?:string
   }

5.1.4.  frame_parsed

   Importance: Core

   HTTP equivalent to the packet_received event.  This event is emitted
   when we actually parse the HTTP/3 frame.  Note: this is not
   necessarily the same as when the HTTP/3 data is actually received on
   the QUIC layer.  For that, see the "data_moved" event.

   TODO: how do we deal with partial frames (e.g., length is very long,
   we're streaming this incrementally: events should indicate this
   setup? or you just have 1 frame_parsed and several data_received
   events for that stream?).  Similar for frame_created.

   Data:

   {
       stream_id:string,
       frame:HTTP3Frame // see appendix for the definitions,
       byte_length:string,

       raw?:string
   }

5.1.5.  data_moved

   Importance: Extra

   Used to indicate when data moves between the HTTP/3 and the transport
   layer (e.g., passing from H3 to QUIC stream buffers and vice versa)
   or between HTTP/3 and the actual user application on top (e.g., a
   browser engine).  This helps debug errors where buffers are full with
   ready data, but aren't beind drained fast enough.

   Data:








Marx                      Expires April 6, 2020                [Page 19]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


  {
      stream_id:string,
      offset_start?:string,
      offset_end?:string,

      length?:number, // to be used mainly if no exact offsets are known

      from?:"application"|"transport",
      to?:"application"|"transport"
  }

   The "from" and "to" fields MUST NOT be set at the same time.  The
   missing field is always implied to have the value "http".

   TODO: add separate event to highlight when we didn't receive enough
   data to actually decode an H3 frame (e.g., only received 1 byte of
   2-byte VLIE encoded value)

   TODO: add separate diagnostic event(s) to indicate when HOL-blocking
   occured (both inter-stream in H3 and intra-stream in QPACK layers and
   for control stream packets (e.g., prioritization, push))

5.2.  QPACK

5.2.1.  header_encoded

   Importance: Base

   Data:

  {
      stream_id?:string, // not necessarily available at the QPACK level

      encoded:string,
      fields:Array<HTTPHeader>
  }

5.2.2.  header_decoded

   Importance: Base

   Data:









Marx                      Expires April 6, 2020                [Page 20]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


  {
      stream_id?:string, // not necessarily available at the QPACK level

      encoded:string,
      fields:Array<HTTPHeader>
  }

5.2.3.  TODO

   Add more qpack-specific events For example: * Encoder Instruction *
   Decoder Instruction

5.3.  prioritization

   TODO: add some higher-level primitives that can work regardless of
   the resulting scheme and then add some more specific things later?
   e.g., scheduler_updated?

5.4.  PUSH

   TODO

6.  General error and warning definitions

6.1.  error

6.1.1.  header_decrypt

   Importance: Base

   Data:

   {
       mask:string, // hex-formatted
       error:string
   }

6.1.2.  payload_decrypt

   Importance: Base

   Data:

   {
       key:string, // hex-formatted
       error:string
   }




Marx                      Expires April 6, 2020                [Page 21]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


6.1.3.  connection_error

   Importance: Extra

   Data:

   {
       code?:TransportError | number,
       description:string
   }

6.1.4.  application_error

   Importance: Extra

   Data:

   {
       code?:ApplicationError | number,
       description:string
   }

6.1.5.  internal_error

   Importance: Base

   Data:

   {
       code?:number,
       description:string
   }

6.2.  warning

6.2.1.  internal_warning

   Importance: Base

   Data:

   {
       code?:number,
       description:string
   }






Marx                      Expires April 6, 2020                [Page 22]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


6.3.  info

6.3.1.  message

   Importance: Extra

   Data:

   {
       message:string
   }

6.4.  debug

6.4.1.  message

   Importance: Extra

   Data:

   {
       message:string
   }

6.5.  verbose

6.5.1.  message

   Importance: Extra

   Data:

   {
       message:string
   }

7.  Security Considerations

   TBD

8.  IANA Considerations

   TBD








Marx                      Expires April 6, 2020                [Page 23]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


9.  References

9.1.  Normative References

   [QUIC-HTTP]
              Bishop, M., Ed., "Hypertext Transfer Protocol Version 3
              (HTTP/3)", draft-ietf-quic-http-20 (work in progress),
              April 2019.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", draft-ietf-quic-
              transport-20 (work in progress), April 2019.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

9.2.  URIs

   [1] https://www.typescriptlang.org/

Appendix A.  QUIC DATA type definitions

A.1.  TransportParameter

class TransportParameter
{
    name:string, // TODO: list all transport parameters properly in an enum
    raw_name:string, // for unknown parameters
    content:any
}

A.2.  PacketType

   enum PacketType {
       initial,
       handshake,
       zerortt = "0RTT",
       onertt = "1RTT",
       retry,
       version_negotiation,
       unknown
   }






Marx                      Expires April 6, 2020                [Page 24]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


A.3.  PacketHeader

   class PacketHeader {
       packet_number: string;
       packet_size?: number;
       payload_length?: number;

       // only if present in the header
       // if correctly using NEW_CONNECTION_ID events,
       // dcid can be skipped for 1RTT packets
       version?: string;
       scil?: string;
       dcil?: string;
       scid?: string;
       dcid?: string;

       // Note: short vs long header is implicit through PacketType
   }

A.4.  KeyType

   enum KeyType {
       server_initial_secret,
       client_initial_secret,

       server_handshake_secret,
       client_handshake_secret,

       server_0rtt_secret,
       client_0rtt_secret,

       server_1rtt_secret,
       client_1rtt_secret
   }

A.5.  QUIC Frames

type QuicFrame = PaddingFrame | PingFrame | AckFrame | ResetStreamFrame | StopSendingFrame | CryptoFrame | NewTokenFrame | StreamFrame | MaxDataFrame | MaxStreamDataFrame | MaxStreamsFrame | DataBlockedFrame | StreamDataBlockedFrame | StreamsBlockedFrame | NewConnectionIDFrame | RetireConnectionIDFrame | PathChallengeFrame | PathResponseFrame | ConnectionCloseFrame | UnknownFrame;

A.5.1.  PaddingFrame

   class PaddingFrame{
       frame_type:string = "padding";
   }







Marx                      Expires April 6, 2020                [Page 25]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


A.5.2.  PingFrame

   class PingFrame{
       frame_type:string = "ping";
   }

A.5.3.  AckFrame

class AckFrame{
    frame_type:string = "ack";

    ack_delay:string;

    // first number is "from": lowest packet number in interval
    // second number is "to": up to and including // highest packet number in interval
    // e.g., looks like [["1","2"],["4","5"]]
    acked_ranges:Array<[string, string]>;

    ect1?:string;
    ect0?:string;
    ce?:string;
}

   Note: the packet ranges in AckFrame.acked_ranges do not necessarily
   have to be ordered (e.g., [["5","9"],["1","4"]] is a valid value).

   Note: the two numbers in the packet range can be the same (e.g.,
   [120,120] means that packet with number 120 was ACKed).  TODO: maybe
   make this into just [120]?

A.5.4.  ResetStreamFrame

   class ResetStreamFrame{
       frame_type:string = "reset_stream";

       id:string;
       error_code:ApplicationError | number;
       final_size:string;
   }

A.5.5.  StopSendingFrame

   class StopSendingFrame{
       frame_type:string = "stop_sending";

       id:string;
       error_code:ApplicationError | number;
   }



Marx                      Expires April 6, 2020                [Page 26]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


A.5.6.  CryptoFrame

   class CryptoFrame{
     frame_type:string = "crypto";

     offset:string;
     length:string;
   }

A.5.7.  NewTokenFrame

   class NewTokenFrame{
     frame_type:string = "new_token";

     length:string;
     token:string;
   }

A.5.8.  StreamFrame

class StreamFrame{
    frame_type:string = "stream";

    id:string;

    // These two MUST always be set
    // If not present in the Frame type, log their default values
    offset:string;
    length:string;

    // this MAY be set any time, but MUST only be set if the value is "true"
    // if absent, the value MUST be assumed to be "false"
    fin:boolean;

    raw?:string;
}

A.5.9.  MaxDataFrame

   class MaxDataFrame{
     frame_type:string = "max_data";

     maximum:string;
   }







Marx                      Expires April 6, 2020                [Page 27]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


A.5.10.  MaxStreamDataFrame

   class MaxStreamDataFrame{
     frame_type:string = "max_stream_data";

     id:string;
     maximum:string;
   }

A.5.11.  MaxStreamsFrame

   class MaxStreamsFrame{
     frame_type:string = "max_streams";

     stream_type:string = "bidirectional" | "unidirectional";
     maximum:string;
   }

A.5.12.  DataBlockedFrame

   class DataBlockedFrame{
     frame_type:string = "data_blocked";

     limit:string;
   }

A.5.13.  StreamDataBlockedFrame

   class StreamDataBlockedFrame{
     frame_type:string = "stream_data_blocked";

     id:string;
     limit:string;
   }

A.5.14.  StreamsBlockedFrame

   class StreamsBlockedFrame{
     frame_type:string = "streams_blocked";

     stream_type:string = "bidirectional" | "unidirectional";
     limit:string;
   }








Marx                      Expires April 6, 2020                [Page 28]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


A.5.15.  NewConnectionIDFrame

   class NewConnectionIDFrame{
     frame_type:string = "new_connection_id";

     sequence_number:string;
     retire_prior_to:string;

     length:number;
     connection_id:string;

     reset_token:string;
   }

A.5.16.  RetireConnectionIDFrame

   class RetireConnectionIDFrame{
     frame_type:string = "retire_connection_id";

     sequence_number:string;
   }

A.5.17.  PathChallengeFrame

   class PathChallengeFrame{
     frame_type:string = "path_challenge";

     data?:string;
   }

A.5.18.  PathResponseFrame

   class PathResponseFrame{
     frame_type:string = "patch_response";

     data?:string;
   }

A.5.19.  ConnectionCloseFrame

   raw_error_code is the actual, numerical code.  This is useful because
   some error types are spread out over a range of codes (e.g., QUIC's
   crypto_error).








Marx                      Expires April 6, 2020                [Page 29]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


type ErrorSpace = "transport" | "application";

class ConnectionCloseFrame{
    frame_type:string = "connection_close";

    error_space:ErrorSpace;
    error_code:TransportError | ApplicationError | number;
    raw_error_code:number;
    reason:string;

    trigger_frame_type?:number; // TODO: should be more defined, but we don't have a FrameType enum atm...
}

A.5.20.  UnknownFrame

   class UnknownFrame{
       frame_type:string = "unknown";
       raw_frame_type:number;
   }

A.5.21.  TransportError

   enum TransportError {
       no_error,
       internal_error,
       server_busy,
       flow_control_error,
       stream_limit_error,
       stream_state_error,
       final_size_error,
       frame_encoding_error,
       transport_parameter_error,
       protocol_violation,
       invalid_migration,
       crypto_buffer_exceeded,
       crypto_error
   }

Appendix B.  HTTP/3 DATA type definitions

B.1.  HTTP/3 Frames

type HTTP3Frame = DataFrame | HeadersFrame | PriorityFrame | CancelPushFrame | SettingsFrame | PushPromiseFrame | GoAwayFrame | MaxPushIDFrame | DuplicatePushFrame | ReservedFrame | UnknownFrame;








Marx                      Expires April 6, 2020                [Page 30]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


B.1.1.  DataFrame

   class DataFrame{
       frame_type:string = "data"
   }

B.1.2.  HeadersFrame

   This represents an _uncompressed_, plaintext HTTP Headers frame
   (e.g., no QPACK compression is applied).

   For example:

fields: [{"name":":path","content":"/"},{"name":":method","content":"GET"},{"name":":authority","content":"127.0.0.1:4433"},{"name":":scheme","content":"https"}]

   TODO: use proper HTTP naming for the fields, names, values, etc.

   class HeadersFrame{
       frame_type:string = "header",
       fields:Array<HTTPHeader>
   }

   class HTTPHeader {
       name:string,
       content:string
   }

B.1.3.  PriorityFrame

class PriorityFrame{
    frame_type:string = "priority",

    prioritized_element_type:string = "request_stream"  | "push_stream" | "placeholder" | "root",
    element_dependency_type?:string = "stream_id"       | "push_id"     | "placeholder_id",

    exclusive:boolean,

    prioritized_element_id:string,
    element_dependency_id:string,
    weight:number

}

B.1.4.  CancelPushFrame







Marx                      Expires April 6, 2020                [Page 31]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   class CancelPushFrame{
       frame_type:string = "cancel_push",
       id:string
   }

B.1.5.  SettingsFrame

class SettingsFrame{
    frame_type:string = "settings",
    fields:Array<Setting>
}

class Setting{
    name:string = "SETTINGS_MAX_HEADER_LIST_SIZE" | "SETTINGS_NUM_PLACEHOLDERS",
    content:string
}

B.1.6.  PushPromiseFrame

   class PushPromiseFrame{
       frame_type:string = "push_promise",
       id:string,

       fields:Array<HTTPHeader>
   }

B.1.7.  GoAwayFrame

   class GoAwayFrame{
       frame_type:string = "goaway",
       id:string
   }

B.1.8.  MaxPushIDFrame

   class MaxPushIDFrame{
       frame_type:string = "max_push_id",
       id:string
   }

B.1.9.  DuplicatePushFrame

   class DuplicatePushFrame{
       frame_type:string = "duplicate_push",
       id:string
   }





Marx                      Expires April 6, 2020                [Page 32]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


B.1.10.  ReservedFrame

   class ReservedFrame{
       frame_type:string = "reserved"
   }

B.1.11.  UnknownFrame

   HTTP/3 re-uses QUIC's UnknownFrame definition, since their values and
   usage overlaps.

B.2.  ApplicationError

   enum ApplicationError{
       http_no_error,
       http_general_protocol_error,
       reserved,
       http_internal_error,
       http_request_cancelled,
       http_incomplete_request,
       http_connect_error,
       http_excessive_load,
       http_version_fallback,
       http_wrong_stream,
       http_id_error,
       http_stream_creation_error,
       http_closed_critical_stream,
       http_early_response,
       http_missing_settings,
       http_unexpected_frame,
       http_request_rejected,
       http_settings_error,
       http_malformed_frame
   }

   TODO: http_malformed_frame is not a single value, but can include the
   frame type in its definition.  This means we need more flexible error
   logging.  Best to wait until h3-draft-23 (PR
   https://github.com/quicwg/base-drafts/pull/2662), which will include
   substantial changes to error codes.

Appendix C.  Change Log

C.1.  Since draft-00:

   o  Added many new events and their definitions

   o  Events are given an importance indicator (issue #22)



Marx                      Expires April 6, 2020                [Page 33]

Internet-Draft QUIC and HTTP/3 event definitions for qlog   October 2019


   o  Event names are more consistent and use past tense (issue #21)

Appendix D.  Design Variations

   TBD

Appendix E.  Acknowledgements

   Thanks to Jana Iyengar, Brian Trammell, Dmitri Tikhonov, Stephen
   Petrides, Jari Arkko, Marcus Ihlar, Victor Vasiliev, Mirja
   Kuehlewind, Jeremy Laine and Lucas Pardue for their feedback and
   suggestions.

Author's Address

   Robin Marx
   Hasselt University

   Email: robin.marx@uhasselt.be
































Marx                      Expires April 6, 2020                [Page 34]
